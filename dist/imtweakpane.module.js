/*!
 * @0b5vr/imtweakpane v0.1.1
 * Tweakpane but with immediate-y interface (actually not)
 *
 * Copyright (c) 2021 0b5vr
 * @0b5vr/imtweakpane is distributed under MIT License
 * https://github.com/0b5vr/imtweakpane/blob/master/LICENSE
 */
import * as Tweakpane from 'tweakpane';

class ImBladeRackApi {
    constructor(bladeRack) {
        this.bladeRackApi = bladeRack;
        this.__params = {};
        this.__folders = {};
        this.__buttons = {};
        this.__tabs = {};
        this.__separators = {};
        this.__inputs = {};
        this.__monitors = {};
        this.__blades = {};
    }
    folder(title, params) {
        if (!ImBladeRackApi.imFolderApiCtor) {
            throw new Error('ImBladeRackApi.imFolderApiCtor is not set' );
        }
        if (this.__folders[title] == null) {
            const folder = this.bladeRackApi.addFolder(Object.assign({ title }, params));
            this.__folders[title] = new ImBladeRackApi.imFolderApiCtor(folder);
        }
        return this.__folders[title];
    }
    button(title, params) {
        if (this.__buttons[title] == null) {
            const button = this.bladeRackApi.addButton(Object.assign({ title }, params));
            this.__buttons[title] = button;
        }
        return this.__buttons[title];
    }
    tab(id, params) {
        if (!ImBladeRackApi.imTabApiCtor) {
            throw new Error('ImBladeRackApi.imTabApiCtor is not set' );
        }
        if (this.__tabs[id] == null) {
            const tab = this.bladeRackApi.addTab(params !== null && params !== void 0 ? params : { pages: [] });
            this.__tabs[id] = new ImBladeRackApi.imTabApiCtor(tab);
        }
        return this.__tabs[id];
    }
    separator(id, params) {
        if (this.__separators[id] == null) {
            const separator = this.bladeRackApi.addSeparator(params);
            this.__separators[id] = separator;
        }
        return this.__separators[id];
    }
    value(key, init, params) {
        this.input(key, init, params);
        return this.__params[key];
    }
    input(key, init, params) {
        if (this.__params[key] == null) {
            this.__params[key] = init;
            const input = this.bladeRackApi.addInput(this.__params, key, params);
            this.__inputs[key] = input;
        }
        return this.__inputs[key];
    }
    monitor(key, value, params) {
        if (this.__params[key] == null) {
            this.__params[key] = value;
            const monitor = this.bladeRackApi.addMonitor(this.__params, key, params);
            this.__monitors[key] = monitor;
        }
        if (value !== undefined && value !== this.__params[key]) {
            this.__params[key] = value;
        }
        return this.__monitors[key];
    }
    blade(id, params) {
        if (this.__blades[id] == null) {
            const blade = this.bladeRackApi.addBlade(params);
            this.__blades[id] = blade;
        }
        return this.__blades[id];
    }
}

class ImFolderApi extends ImBladeRackApi {
    get folderApi() {
        return this.bladeRackApi;
    }
    constructor(folder) {
        super(folder);
    }
}
// don't worry about it
ImBladeRackApi.imFolderApiCtor = ImFolderApi;

class ImPane extends ImBladeRackApi {
    get pane() {
        return this.bladeRackApi;
    }
    constructor(config) {
        super(new Tweakpane.Pane(config));
    }
}

class ImTabPageApi extends ImBladeRackApi {
    get folderApi() {
        return this.bladeRackApi;
    }
    constructor(page) {
        super(page);
    }
}

class ImTabApi {
    constructor(tabApi) {
        this.tabApi = tabApi;
        this.__pages = {};
        tabApi.pages.forEach((page) => {
            this.__pages[page.title] = new ImTabPageApi(page);
        });
    }
    page(title, params) {
        if (this.__pages[title] == null) {
            const page = this.tabApi.addPage(Object.assign({ title }, params));
            this.__pages[title] = new ImTabPageApi(page);
        }
        return this.__pages[title];
    }
}
// don't worry about it
ImBladeRackApi.imTabApiCtor = ImTabApi;

export { ImBladeRackApi, ImFolderApi, ImPane, ImTabApi, ImTabPageApi };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
