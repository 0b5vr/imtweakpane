/*!
 * @0b5vr/imtweakpane v0.2.0
 * Tweakpane but with immediate-y interface (actually not)
 *
 * Copyright (c) 2021-2023 0b5vr
 * @0b5vr/imtweakpane is distributed under MIT License
 * https://github.com/0b5vr/imtweakpane/blob/master/LICENSE
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tweakpane')) :
    typeof define === 'function' && define.amd ? define(['exports', 'tweakpane'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.IMTWEAKPANE = {}, global.tweakpane));
})(this, (function (exports, tweakpane) { 'use strict';

    class ImContainerApi {
        constructor(container) {
            this.containerApi = container;
            this.__params = {};
            this.__folders = {};
            this.__buttons = {};
            this.__tabs = {};
            this.__bindings = {};
            this.__blades = {};
        }
        folder(title, params) {
            const path = title.split("/");
            if (path.length > 1) {
                const folder = path[0];
                const remainingPath = path.slice(1).join("/");
                return this.folder(folder).folder(remainingPath, params);
            }
            if (!ImContainerApi.imFolderApiCtor) {
                throw new Error("ImContainerApi.imFolderApiCtor is not set"
                    );
            }
            if (this.__folders[title] == null) {
                const folder = this.containerApi.addFolder(Object.assign({ title }, params));
                this.__folders[title] = new ImContainerApi.imFolderApiCtor(folder);
            }
            return this.__folders[title];
        }
        button(title, params) {
            const path = title.split("/");
            if (path.length > 1) {
                const folder = path[0];
                const remainingPath = path.slice(1).join("/");
                return this.folder(folder).button(remainingPath, params);
            }
            if (this.__buttons[title] == null) {
                const button = this.containerApi.addButton(Object.assign({ title }, params));
                this.__buttons[title] = button;
            }
            return this.__buttons[title];
        }
        tab(id, params) {
            const path = id.split("/");
            if (path.length > 1) {
                const folder = path[0];
                const remainingPath = path.slice(1).join("/");
                return this.folder(folder).tab(remainingPath, params);
            }
            if (!ImContainerApi.imTabApiCtor) {
                throw new Error("ImContainerApi.imTabApiCtor is not set"
                    );
            }
            if (this.__tabs[id] == null) {
                const tab = this.containerApi.addTab(params !== null && params !== void 0 ? params : { pages: [] });
                this.__tabs[id] = new ImContainerApi.imTabApiCtor(tab);
            }
            return this.__tabs[id];
        }
        value(key, init, params) {
            var _a;
            const path = key.split("/");
            if (path.length > 1) {
                const folder = path[0];
                const remainingPath = path.slice(1).join("/");
                return this.folder(folder).value(remainingPath, init, params);
            }
            this.binding(key, init, params);
            return (_a = this.__params[key]) !== null && _a !== void 0 ? _a : null;
        }
        binding(key, init, params) {
            var _a;
            const path = key.split("/");
            if (path.length > 1) {
                const folder = path[0];
                const remainingPath = path.slice(1).join("/");
                return this.folder(folder).binding(remainingPath, init, params);
            }
            if (init != null) {
                if (this.__params[key] == null) {
                    this.__params[key] = init;
                    const binding = this.containerApi.addBinding(this.__params, key, params);
                    this.__bindings[key] = binding;
                }
                else if (params === null || params === void 0 ? void 0 : params.readonly) {
                    this.__params[key] = init;
                }
            }
            return (_a = this.__bindings[key]) !== null && _a !== void 0 ? _a : null;
        }
        blade(id, params) {
            const path = id.split("/");
            if (path.length > 1) {
                const folder = path[0];
                const remainingPath = path.slice(1).join("/");
                return this.folder(folder).blade(remainingPath, params);
            }
            if (this.__blades[id] == null && params != null) {
                const blade = this.containerApi.addBlade(params);
                this.__blades[id] = blade;
            }
            return this.__blades[id];
        }
    }

    class ImFolderApi extends ImContainerApi {
        get folderApi() {
            return this.containerApi;
        }
        constructor(folder) {
            super(folder);
        }
    }
    // don't worry about it
    ImContainerApi.imFolderApiCtor = ImFolderApi;

    class ImPane extends ImContainerApi {
        get pane() {
            return this.containerApi;
        }
        constructor(config) {
            super(new tweakpane.Pane(config));
        }
    }

    class ImTabPageApi extends ImContainerApi {
        get folderApi() {
            return this.containerApi;
        }
        constructor(page) {
            super(page);
        }
    }

    class ImTabApi {
        constructor(tabApi) {
            this.tabApi = tabApi;
            this.__pages = {};
            tabApi.pages.forEach((page) => {
                this.__pages[page.title] = new ImTabPageApi(page);
            });
        }
        page(title, params) {
            if (this.__pages[title] == null) {
                const page = this.tabApi.addPage(Object.assign({ title }, params));
                this.__pages[title] = new ImTabPageApi(page);
            }
            return this.__pages[title];
        }
    }
    // don't worry about it
    ImContainerApi.imTabApiCtor = ImTabApi;

    exports.ImContainerApi = ImContainerApi;
    exports.ImFolderApi = ImFolderApi;
    exports.ImPane = ImPane;
    exports.ImTabApi = ImTabApi;
    exports.ImTabPageApi = ImTabPageApi;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
